hell实验









































1.实验目的
 (1).学习Linux相关软件，如gcc、gdb和make的使用；
 (2).熟悉使用Linux中lex进行词法分析，YACC进行语法分析并将二者进行结合的基本方法；
 (3).运用man手册查询相关指令；
 (4).学习Linux系统调用；
 (5).熟悉、掌握并学会运用进程控制和进程间通信的方法；
2.需求说明
2.1基本要求
(1).本实验的user-sh程序设计不包括对配置文件和命令行参数的支持。user-sh应提供一个命令提示符。如“user-sh>”以等待用户输入，执行命令输出的必要信息，然后再打印下一个命令提示符。当用户没有输入时，user-sh需要一直处于随时等待输入状态，同时在屏幕上显示一些基本提示信息；
 (2).可以正确实现以下命令：
  i.exit(结束所有子进程并退出user-sh)
  ii.jobs(打印当前正在后台执行的作业或者被挂起的作业的信息)
  iii.history(列出用户最近输入过的N条命令，不管这些命令是否被正确执行)
  iv.fg %<int>(将<int>标识的作业放置前台运行，若这个作业原来已经挂起则让其继续运行，user-sh应当在打印新的命令提示符前等待前台运行的子进程结束)
  v.bg %<int>(将<int>标识的作业放置后台运行)；
 (3).通过下列组合键实现前后台切换：
  i.Ctrl+Z——产生SIGTSTP信号，挂起正在user-sh运行的作业，如果user-sh前台没有作业，则该组合键无效；
  ii.Ctrl+C——产生SIGINT信号，这个信号不终止user-sh，而是通过user-sh发出信号杀死前台作业中的进程，如果前台没有作业，则该组合键无效；
 (4).实现对I/O重定向的支持：一个命令后面会跟有两种元字符：
  i.<——程序的输入被重定向到一个指定文件中；  
  ii.>——程序的输出被重定向到一个指定文件中，若输出文件不存在，则需要创建一个输出文件；若输入文件不存在，则认为命令错误.
 (5).使用YACC工具实现user-sh的语法分析功能：
语法分析器应具备以下功能：能够检查用户的输入错误，如果用户输入的某些地方出错，user-sh应提供相应的出错信息，这里定义空格符为分隔符，user-sh应能处理命令行中间和前后出现的重复空格符。同时，YACC分析工具还应该完成user-sh中语法分析部分的开发。
  2.2提高要求
 (1).尝试对YACC语法分析的文法进行进一步的修改与完善；
 (2).尝试在Linux下将Lex和YACC结合起来使用进行词法和语法分析；
 (3).未实现通配符的支持和实现，但已实现下部命令：
  i.echo指令
  ii.tail -f filename 我们的tail指令支持打印全部文件或者文件的后n行；
 (4).实现对管道的支持；
 (5).参照组合键Ctrl+Z命令的实现方法，考虑并发现组合键Ctrl+C命令（如基本要求所言已实现）；、
2.3完成情况
1.完成了YACC和Lex，将其结合起来进行词法和语法分析；
2.对其他常用命令进行了实现，此外，增加了echo指令、pwd指令、whoami指令、tail指令，其中tail指令支持打印全部文本或后若干行；
3.实现了对管道的支持；
4.在改进了Ctrl+Z命令的基础下，我们又实现了组合键Ctrl+C;

3.设计说明
3.1程序流程图

3.2基本要求实现说明及提高要求实现说明
实验中的所有基本要求（Ctrl+C除外）源代码都已经基本或者部分实现；但是仍有一定的bug需要修复，整个基本要求的实现是主要围绕着对bug的更改而进行的，所以基本要求的实现说明将围绕着对这些bug的更改说明而进行：
问题1：Ctrl+Z可以挂起bg运行的进程，而bg运行的进程在后台，                                   不应该被挂起；
问题分析：源代码没有对前后台进行区分，以致在使用Ctrl+Z组合键时user-sh会不加区分的挂起进程；
解决步骤：
1.在使用fg命令时，使用tcsetpgrp(0,fgpid)函数将所表示的进程设置为前台进程（相当于将控制终端与该fgpid所指进程相连），同时使得user-sh脱离控制终端,此时使用Ctrl+Z或者Ctrl+C是调用shell自带组合键对前台进程进行操作；
改动代码段：
2.此时user-sh正处于后台，我们需要做到当该前台进程（被fg命令提到前台的）使用waitpid()函数使得其满足当进程正常终止或者被Ctrl+Z挂起或者被Ctrl+C杀死时，user-sh可以回到前台，回到控制终端，以便用户进行下面操作；
改动代码段：
3.新增一函数Ctrl_CZ，其唯一作用是输出命令提示符，在对bg命令提出的进程进行Ctrl_C或者Ctrl_Z组合键操作时调用该函数，使得该组合键操作无效；
改动代码段：
问题2：在父进程与子进程同时运行的情况下，依照源代码的设计，父进程须给子进程发送信号，但由于父子进程的运行速度未知，子进程有可能在信号接收装置未安装成功前就接收到信号，导致错误发生；
解决思路：在父进程中的kill函数发送信号前使用sleep命令将其休眠足够长的时间以保证子进程的信号接收装置安装完成；
改动代码段：
问题3：运行前台作业后，尽管可以执行Ctrl+Z正常挂起，但是使用fg %<int>运行前台作业时 命令提示符会在作业执行完前就打印出来，即父进程没有等待子进程执行完就执行，即PPT所示的坑2：
解决思路：
改动代码段：
（注：这里的设计主要是针对源代码中出现的错误及其修正方法而进行的说明）
问题4：管道实现
设计思路：由于一行带管道的字符串包含多个进程，因此我们首先在命令解析函数中对出现管道符的输入字符串进行了递归操作（即反复读入并储存第一个管道符以及下一个管道符之前的这一段内容）——我们将第一个管道符出现位置+1记录下来，在递归调用的时候将该值作为下一个begin，在执行管道函数中，我们让父进程不断创建子进程，每个子进程执行一个输入字符串中的某一个命令，这些命令在命令解析函数中被我们用一个链表串起来。
改动代码段：void executePipe(SimpleCmd *cmd)
{
    pid_t pid;
    int number, i;
    int fd[2], pipeIn, pipeOut, piRd=-1;
    char hehehe[1]="";
    headPipe=NULL;
    struct sigaction action;
    action.sa_sigaction = exitPipe;
    sigfillset(&action.sa_mask);
    action.sa_flags = SA_SIGINFO;
    sigaction(SIGCHLD, &action, NULL);
    signal(SIGTSTP, old_handler1);
    signal(SIGINT, old_handler2);
    signal(SIGTTOU, old_handler3);    
    signal(SIGCONT, restartPipe);

    SimpleCmd* p=cmd;
    while (p!=NULL){
        if (!exists(p->args[0])) {
            printf("can't find cmd %s\n", p->args[0]);
            exit(0);
        }
	if (p->next!=NULL&&(p->output!=NULL||p->next->input!=NULL)){
            printf("pipe repeat");
            putchar('\n');
            exit(0);
        }
        if (p->next!=NULL){//the pipe needs to be chongdingxiang 
            p->output=hehehe;
            p->next->input=hehehe;
        }
        p=p->next;
    }
    
    p=cmd;
    number=0;
    ingnore=0;

    while (p!=NULL)
    {
        if (p->next!=NULL)
        {
            if (pipe(fd)==-1)
            {
                printf("create pipe failed");
                putchar('\n');
                exit(0);
            }
        }
        else {
            fd[1]=-1;
        }
            pid=fork();
            number++;
            if (pid==0)
            break;
            else {
                headPipe=addpNode(headPipe,pid,piRd,fd[1]);
            }
            piRd = fd[0];
            p=p->next;
    }
    i=0;
    if (pid>0) 
    {
        for (i=0;i<number*2+3;i++) close(i);
        while (ingnore<number)
        {
        }
        exit(0);
    }
    if (p->next!=NULL) 
	close(fd[0]);
    if (p->input!=NULL)
    {
        if (strlen(p->input)>0)
        {
            if((pipeIn = open(p->input, O_RDONLY, S_IRUSR|S_IWUSR)) == -1){
                printf("can not open the file %s \n", p->input);
                exit(0);
            }
        }
        else
        {
            pipeIn=piRd;           
        }
    }
	else 
	pipeIn=0;
    if (p->output!=NULL)
    {
        if (strlen(p->output)>0)
        {
            if((pipeOut = open(p->output, O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR)) == -1){
                printf("can not open the file %s\n", p->output);
                exit(0);
            }
        }
        else
        {
            pipeOut=fd[1];          
        }
    }
	else 
	pipeOut=1;
    if(dup2(pipeIn, 0) == -1){
        printf("reDirection standard input is error\n");
        exit(0);
    }
    if(dup2(pipeOut, 1) == -1){
        printf("reDirection standard output is error\n");
        exit(0);
    }
    for (i=3;i<=3+number*2;++i) 
    {
        close(i);
    }
    if (pipeIn!=0) 
	close(pipeIn); 
    if (pipeOut!=1) 
	close(pipeOut); 
    if (!exists(p->args[0])) exit(0);
    justArgs(p->args[0]);            
    if(execvp(cmdBuff, p->args) < 0){ /**/
        printf("execv failed\n");
        exit(0);
    }       
}
问题五：实现ctrl_z和ctrl_c
利用tcsetgprp()函数将进程与控制终端相连，使得程序能够接收到中断与挂起信号。
if (tcsetpgrp(0,fgPid)<0){//change terminal read ,write ,error
	printf("stdinfailed\n"); 
    }  
    if (tcsetpgrp(1,fgPid)<0){
        printf("stdoutfailed\n");
    }
    if (tcsetpgrp(2,fgPid)<0){
        printf("errorfailed\n");
    }
    kill(now->pid, SIGCONT); //sen continue message to job ,and make run
       waitpid(fgPid, NULL, WUNTRACED); //father wait for fg 

    if (tcsetpgrp(0,getpid())<0){//get back terminal
         printf("stdinfailed\n");    
    }
    if (tcsetpgrp(1,getpid())<0){
	 printf("stdoutfailed\n");
    }
    if (tcsetpgrp(2,getpid())<0){
         printf("errorfailed\n"); 
    }
问题六：解析管道命令，在刚开始使用管道的时候，我们利用递归将管道逐次拆解为基本命令。
SimpleCmd* handleSimpleCmdStr(int begin, int end){
    int i, j, k;
    int fileFinished; //record cmd if execute finished
    char c, buff[10][40], inputFile[30], outputFile[30], *temp = NULL;
    SimpleCmd *cmd = (SimpleCmd*)malloc(sizeof(SimpleCmd));
    int nextPipe=0;//mark next pipe position
	//
    cmd->isBack = 0;
    cmd->input = NULL;
    cmd->output = NULL;
    cmd->next=NULL;
    //默认为非后台命令，输入输出重定向为null
    for(i = begin; i<10; i++){
        buff[i][0] = '\0';
    }
    inputFile[0] = '\0';
    outputFile[0] = '\0';
    
    i = begin;
	//初始化相应变量
    while(i < end && (inputBuff[i] == ' ' || inputBuff[i] == '\t')){
        i++;
    }
    
    k = 0;
    j = 0;
    fileFinished = 0;
    nextPipe=0;
    temp = buff[k]; //以下通过temp指针的移动实现对buff[i]的顺次赋值过程
    while(i < end){
		/*根据命令字符的不同情况进行不同的处理*/
        switch(inputBuff[i]){ 
            case '|'://"  " and "/t" and "|" is
            case ' ':
            case '\t': //ÃüÁîÃûŒ°²ÎÊýµÄœáÊø±êÖŸ
                temp[j] = '\0';
                j = 0;
		        if(i-1<0||inputBuff[i]!='|'||(inputBuff[i-1]!=' '&&inputBuff[i-1]!='\t'))
                if(!fileFinished){
                    k++;
                    temp = buff[k];
                }
                if('|'==inputBuff[i])
                {
                    nextPipe=i+1;
                }
                break;

            case '<': //输入重定向标志
                if(j != 0){
		      //此判断为防止命令直接挨着<符号导致判断为同一个参数，如果ls<sth
                    temp[j] = '\0';
                    j = 0;
                    if(!fileFinished){
                        k++;
                        temp = buff[k];
                    }
                }
                temp = inputFile;
                fileFinished = 1;
                i++;
                break;
                
            case '>': //输出重定向标志
                if(j != 0){
                    temp[j] = '\0';
                    j = 0;
                    if(!fileFinished){
                        k++;
                        temp = buff[k];
                    }
                }
                temp = outputFile;
                fileFinished = 1;
                i++;
                break;
                
            case '&': //后台运行标志
                if(j != 0){
                    temp[j] = '\0';
                    j = 0;
                    if(!fileFinished){
                        k++;
                        temp = buff[k];
                    }
                }
                cmd->isBack = 1;
                fileFinished = 1;
                i++;
                break;
                
            default: //默认则读入到temp指定的空间
                temp[j++] = inputBuff[i++];
                continue;
		}
                if(nextPipe){
			break;
                }
		//跳过空格等无用信息
        while(i < end && (inputBuff[i] == ' ' || inputBuff[i] == '\t')){
            i++;
        }
	}
    
    if(inputBuff[end-1] != ' ' && inputBuff[end-1] != '\t' && inputBuff[end-1] != '&'&&!nextPipe){
        temp[j] = '\0';
        if(!fileFinished){
            k++;
        }
    }
	//依次为命令名及其各个参数赋值
    cmd->args = (char**)malloc(sizeof(char*) * (k + 1));
    cmd->args[k] = NULL;
    for(i = 0; i<k; i++){
        j = strlen(buff[i]);
        cmd->args[i] = (char*)malloc(sizeof(char) * (j + 1));   
        strcpy(cmd->args[i], buff[i]);
    }
    length=k;
	//如果有输入重定向文件，则为命令的输入重定向变量赋值
    if(strlen(inputFile) != 0){
        j = strlen(inputFile);
        cmd->input = (char*)malloc(sizeof(char) * (j + 1));
        strcpy(cmd->input, inputFile);
    }

     //如果有输出重定向文件，则为命令的输出重定向变量赋值
    if(strlen(outputFile) != 0){
        j = strlen(outputFile);
        cmd->output = (char*)malloc(sizeof(char) * (j + 1));   
        strcpy(cmd->output, outputFile);
    }
   // #ifdef DEBUG
    //printf("****\n");
    //printf("isBack: %d\n",cmd->isBack);
    //	for(i = 0; cmd->args[i] != NULL; i++){
    //		printf("args[%d]: %s\n",i,cmd->args[i]);
	//}
    //printf("input: %s\n",cmd->input);
    //printf("output: %s\n",cmd->output);
    //printf("****\n");
    //#endif
    
    if(nextPipe!=0) 
    {
		
        cmd->next = handleSimpleCmdStr(nextPipe,end);
        cmd->isBack = 0;
        cmd->next->isBack = 0;
    }
    return cmd;
}
问题8：yacc和lex的语法分析：
      Lex 是一种生成扫描器的工具。扫描器是一种识别文本中的词汇模式的程序。 这些词汇模式（或者常规表达式）在一种特殊的句子结构中定义，这个我们一会儿就要讨论。
一种匹配的常规表达式可能会包含相关的动作。这一动作可能还包括返回一个标记。 当 Lex 接收到文件或文本形式的输入时，它试图将文本与常规表达式进行匹配。 它一次读入一个输入字符，直到找到一个匹配的模式。 如果能够找到一个匹配的模式，Lex 就执行相关的动作（可能包括返回一个标记）。 另一方面，如果没有可以匹配的常规表达式，将会停止进一步的处理，Lex 将显示一个错误消息。
Lex 和 C 是强耦合的。一个 .lex 文件（Lex 文件具有 .lex 的扩展名）通过 lex 公用程序来传递，并生成 C 的输出文件。这些文件被编译为词法分析器的可执行版本。 
      Yacc 代表 Yet Another Compiler Compiler。 Yacc 的 GNU 版叫做 Bison。它是一种工具，将任何一种编程语言的所有语法翻译成针对此种语言的 Yacc 语 法解析器。它用巴科斯范式(BNF, Backus Naur Form)来书写。按照惯例，Yacc 文件有 .y 后缀。编译行如下调用 Yacc 编译器：
  
在进一步阐述以前，让我们复习一下什么是语法。在上一节中，我们看到 Lex 从输入序列中识别标记。 如果你在查看标记序列，你可能想在这一序列出现时执行某一动作。 这种情况下有效序列的规范称为语法。Yacc 语法文件包括这一语法规范。 它还包含了序列匹配时你想要做的事。
为了更加说清这一概念，让我们以英语为例。 这一套标记可能是：名词, 动词, 形容词等等。为了使用这些标记造一个语法正确的句子，你的结构必须符合一定的规则。 一个简单的句子可能是名词+动词或者名词+动词+名词。(如 I care. See spot run.)
所以在我们这里，标记本身来自语言（Lex），并且标记序列允许用 Yacc 来指定这些标记(标记序列也叫语法)。
终端和非终端符号
终端符号 : 代表一类在语法结构上等效的标记。 终端符号有三种类型：
命名标记: 这些由 %token 标识符来定义。 按照惯例，它们都是大写。
字符标记 : 字符常量的写法与 C 相同。例如, -- 就是一个字符标记。
字符串标记 : 写法与 C 的字符串常量相同。例如，"<<" 就是一个字符串标记。
lexer 返回命名标记。
非终端符号 : 是一组非终端符号和终端符号组成的符号。 按照惯例，它们都是小写。 在例子中，file 是一个非终端标记而 NAME 是一个终端标记。
用 Yacc 来创建一个编译器包括四个步骤：
通过在语法文件上运行 Yacc 生成一个解析器。
说明语法：
编写一个 .y 的语法文件（同时说明 C 在这里要进行的动作）。
编写一个词法分析器来处理输入并将标记传递给解析器。 这可以使用 Lex 来完成。
编写一个函数，通过调用 yyparse() 来开始解析。
编写错误处理例程（如 yyerror()）。
编译 Yacc 生成的代码以及其他相关的源文件。
将目标文件链接到适当的可执行解析器库。
line            :   '\n' {          return 0;            }
                    |command '\n'   {
                        $$ = $1;
                        if ($$==NULL){
                             return 0; 
                        }
                        for (tmpcmd = (SimpleCmd*)$$;tmpcmd!=NULL;tmpcmd = tmpcmd->next)
                        {
                            len = 0;
                            for (argcv = tmpcmd->ac;argcv!=NULL;argcv = argcv->next)
				len++;
                            if (len) 
                            {
                                tmpcmd->argc = len;
                                tmpcmd->args = (char**)malloc(sizeof(char*)*len);
                                for (argcv = tmpcmd->ac;argcv!=NULL;argcv = argcv->next)
                                {
				    len--;
                                    tmpcmd->args[len] = strdup(argcv->s);
                                }
                            }
                        }
                        execSimpleCmd((SimpleCmd*)$$);
                        commandDone = 1; 
                        return 0; 
                    }
;

command         :   fbCommand  {
                        $$ = $1;    
             
                    }
                    |fbpCommand  {
                        $$ = $1;
                    }
;

fbpCommand      :   pCommand   { $$ = $1;}
                    |pCommand '&'  {
                        $$ = $1;  
                        tmpcmd = (SimpleCmd*)$$;
                        tmpcmd->isBack = 1;                        
                    }
;

pCommand        :   pCommand '|' simpleCmd {
                        $$ = $1;
                        for (tmpcmd = (SimpleCmd*)$$;tmpcmd->next!=NULL;tmpcmd = tmpcmd->next)
			;
                        tmpcmd->next = $3;                                
                    }
                    |simpleCmd '|' simpleCmd {
                        $$ = $1;
                        tmpcmd = (SimpleCmd*)$$;
                        tmpcmd->next = $3;                                                
                    }
;

fbCommand       :   simpleCmd   { $$ = $1;}
                    |simpleCmd '&'  {
                        $$ = $1;  
                        tmpcmd = (SimpleCmd*)$$;
                        tmpcmd->isBack = 1;                        
                    }
;

simpleCmd       :   args inputRedirect outputRedirect {
                        $$ = $1;
                        tmpcmd = (SimpleCmd*)$$;
                        tmpcmd->input = $2;
                        tmpcmd->output = $3;
                    }
;

inputRedirect   :   /* empty */     {
                        $$ = NULL;
                    }
                    |'<' STRING     {
                        $$ = strdup($2);
                    }
;

outputRedirect  :   /* empty */     {
                        $$ = NULL;
                    }
                    |'>' STRING     {
                        $$ = strdup($2);
                    }
;

args            :   STRING     {
                        tmpcmd = (SimpleCmd*)malloc(sizeof(SimpleCmd));
                        tmpcmd->isBack = 0;
                        tmpcmd->argc = 0;
                        tmpcmd->input = NULL;
                        tmpcmd->output = NULL;
                        tmpcmd->next = NULL;
                        tmpcmd->ac = NULL;
                        $$ = tmpcmd;
                        tmpcmd = (SimpleCmd*)$$;
                        argcv = (Argc*)malloc(sizeof(Argc));
                        argcv->next = tmpcmd->ac;                            
                        argcv->s = strdup($1);
                        tmpcmd->ac = argcv;
                    }
                    |args STRING    {
                        if ($1==NULL) 
                        {
                            tmpcmd = (SimpleCmd*)malloc(sizeof(SimpleCmd));
                            tmpcmd->isBack = 0;
                            tmpcmd->argc = 0;
                            tmpcmd->input = NULL;
                            tmpcmd->output = NULL;
                            tmpcmd->next = NULL;
                            tmpcmd->ac = NULL;
                            $$ = tmpcmd;
                        }
                        else {
                            $$ = $1;
                        }
                        tmpcmd = (SimpleCmd*)$$;
                        argcv = (Argc*)malloc(sizeof(Argc));                            
                        argcv->s = strdup($2);
			argcv->next = tmpcmd->ac;
                        tmpcmd->ac = argcv;
                    }
;

%%
4.收获和感想
    本次操作系统实验的形式对于我们来说是全新的，我们从未做过这种已经给了大量代码（但是有一些bug），让我们进行修改和添加的实验。开始我们在发现bug的阶段遇到了很多困难，通过不断的小组内讨论商量，以及向别的组各种大神请教，才算大致解决了各种问题。其中如何解决ctrl+z的问题更是花了我们相当长的时间。另外，本实验的调试也是比较困难的，特别是管道的正确关闭，让我们很苦恼。
     特别是在linux下调试程序和编译程序都比windows下复杂，而且又不太会用gdb，使得对于运行时的错误只能够利用printf逐步打印，并判断出错误位置加以修改，感觉整个实验入门难度比较大，刚开始看的时候有点不知道在将什么，都是靠在网上查阅资料一点一点的理解，同时在完成作业的时候，发现能够和其他组进行一些技术上的讨论，以及组内的讨论对我们有很大的好处，能够理解或者修补一些我们以前没有注意到的问题，能够很大的提升我们的自学能力和交流能力。
       在老师讲课的时候，我们只是在概念上理解了进程，进程组等名词，但在实验中我们具体操作了这些函数，使我们对操作系统的理解更进一步，能够初步了解shell的运行机制，以及大量的系统调用函数。

