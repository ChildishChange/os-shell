%{
    #include "global.h"
    SimpleCmd * tmpcmd;
    Argc * argcv;
    int yylex ();
    void yyerror ();
      
    int offset, len, commandDone;

%}

%token STRING

%%
line            :   '\n' {          return 0;            }
                    |command '\n'   {
                        $$ = $1;
                        if ($$==NULL){
                             return 0; 
                        }
                        for (tmpcmd = (SimpleCmd*)$$;tmpcmd!=NULL;tmpcmd = tmpcmd->next)
                        {
                            len = 0;
                            for (argcv = tmpcmd->ac;argcv!=NULL;argcv = argcv->next)
				len++;
                            if (len) 
                            {
                                tmpcmd->argc = len;
                                tmpcmd->args = (char**)malloc(sizeof(char*)*len);
                                for (argcv = tmpcmd->ac;argcv!=NULL;argcv = argcv->next)
                                {
				    len--;
                                    tmpcmd->args[len] = strdup(argcv->s);
                                }
                            }
                        }
                        execSimpleCmd((SimpleCmd*)$$);
                        commandDone = 1; 
                        return 0; 
                    }
;

command         :   fbCommand  {
                        $$ = $1;    
             
                    }
                    |fbpCommand  {
                        $$ = $1;
                    }
;

fbpCommand      :   pCommand   { $$ = $1;}
                    |pCommand '&'  {
                        $$ = $1;  
                        tmpcmd = (SimpleCmd*)$$;
                        tmpcmd->isBack = 1;                        
                    }
;

pCommand        :   pCommand '|' simpleCmd {
                        $$ = $1;
                        for (tmpcmd = (SimpleCmd*)$$;tmpcmd->next!=NULL;tmpcmd = tmpcmd->next)
			;
                        tmpcmd->next = $3;                                
                    }
                    |simpleCmd '|' simpleCmd {
                        $$ = $1;
                        tmpcmd = (SimpleCmd*)$$;
                        tmpcmd->next = $3;                                                
                    }
;

fbCommand       :   simpleCmd   { $$ = $1;}
                    |simpleCmd '&'  {
                        $$ = $1;  
                        tmpcmd = (SimpleCmd*)$$;
                        tmpcmd->isBack = 1;                        
                    }
;

simpleCmd       :   args inputRedirect outputRedirect {
                        $$ = $1;
                        tmpcmd = (SimpleCmd*)$$;
                        tmpcmd->input = $2;
                        tmpcmd->output = $3;
                    }
;

inputRedirect   :   /* empty */     {
                        $$ = NULL;
                    }
                    |'<' STRING     {
                        $$ = strdup($2);
                    }
;

outputRedirect  :   /* empty */     {
                        $$ = NULL;
                    }
                    |'>' STRING     {
                        $$ = strdup($2);
                    }
;

args            :   STRING     {
                        tmpcmd = (SimpleCmd*)malloc(sizeof(SimpleCmd));
                        tmpcmd->isBack = 0;
                        tmpcmd->argc = 0;
                        tmpcmd->input = NULL;
                        tmpcmd->output = NULL;
                        tmpcmd->next = NULL;
                        tmpcmd->ac = NULL;
                        $$ = tmpcmd;
                        tmpcmd = (SimpleCmd*)$$;
                        argcv = (Argc*)malloc(sizeof(Argc));
                        argcv->next = tmpcmd->ac;                            
                        argcv->s = strdup($1);
                        tmpcmd->ac = argcv;
                    }
                    |args STRING    {
                        if ($1==NULL) 
                        {
                            tmpcmd = (SimpleCmd*)malloc(sizeof(SimpleCmd));
                            tmpcmd->isBack = 0;
                            tmpcmd->argc = 0;
                            tmpcmd->input = NULL;
                            tmpcmd->output = NULL;
                            tmpcmd->next = NULL;
                            tmpcmd->ac = NULL;
                            $$ = tmpcmd;
                        }
                        else {
                            $$ = $1;
                        }
                        tmpcmd = (SimpleCmd*)$$;
                        argcv = (Argc*)malloc(sizeof(Argc));                            
                        argcv->s = strdup($2);
			argcv->next = tmpcmd->ac;
                        tmpcmd->ac = argcv;
                    }
;

%%

/****************************************************************
                  词法分析函数
****************************************************************/

//由lex.l文件提供

/****************************************************************
                  错误信息执行函数
****************************************************************/
void yyerror()
{
    printf("你输入的命令不正确，请重新输入！\n");
}

/****************************************************************
                  main主函数
****************************************************************/
int main(int argc, char** argv) {
    int i;
    char c;

    commandDone = 0;
    offset = 0;
    len = 0;
    init(); //初始化环境
    
   printf("********************************************************************\n");
   printf("*      author:zhangshaojun,yangjian                                *\n");
   printf("*      author:huhantao,chrngfurui                                  *\n");
   printf("********************************************************************\n");

    while(1){

        ctrl_cz();

        if (tmpcmd!=NULL) 
	free(tmpcmd);
        tmpcmd = NULL;
        if (argcv!=NULL) 
	free(argcv);
        argcv = NULL;
  
        yyparse(); //调用语法分析函数，该函数由yylex()提供当前输入的单词符号

        if(commandDone == 1){ //命令已经执行完成后，添加历史记录信息
            commandDone = 0;
            addHistory(inputBuff);
        }
        
     }

    return (EXIT_SUCCESS);
}
